.article-list
%h2.vertical-label= title
.rounded
  .topic-container
    %h2= topic.title
    %h4.subtitle= topic.description
    %btn.pull-left= link_to "See discussion archive", site_topics_path, method: :get

    -responses = topic.responses.where('reported = ? OR approved = ?', false, true).order('created_at DESC')

    .wrapper-div
      - responses.each do |r|
        - unless r.content.nil?
          .response
            .votes
              .vote-button
                - upvoted_class = hasupvoted(r) ? 'upvoted' : nil
                = link_to "\u25B2".html_safe, upvote_site_topic_response_path(topic, r), remote: true, method: :post, class: "up_vote #{upvoted_class}"
                %span.up_vote_number{ class: "#{upvoted_class}" }= r.upvotes.to_s
              .vote-button
                - downvoted_class = hasdownvoted(r) ? 'downvoted' : nil
                = link_to "\u25BC", downvote_site_topic_response_path(topic, r), remote: true, method: :post, class: "down_vote #{downvoted_class}"
                %span.down_vote_number{ class: "#{downvoted_class}" }= r.downvotes.to_s
            %span.content= r.content
            %span.timestamp= datetime_tag(r.created_at,"m/dd | h:MM:ss TT")
    = simple_form_for([:site, topic, topic.responses.build], html: {class: 'form-horizontal response-form'}, defaults: {input_html: {class: 'input-xlarge'}}) do |f|
      = f.error_notification
      = f.input :content, as: :string, placeholder: 'Submit a response...', label: false, input_html: {class: 'response-input', id: 'response-input'}

      .recaptcha= recaptcha_tags

      = f.submit class: 'btn'